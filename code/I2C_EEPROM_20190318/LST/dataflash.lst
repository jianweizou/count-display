C51 COMPILER V9.54   DATAFLASH                                                             03/18/2019 23:14:43 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DATAFLASH
OBJECT MODULE PLACED IN .\Output\dataflash.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE Code\dataflash.c ROM(COMPACT) OPTIMIZE(8,SIZE) BROWSE INCDIR(..\..\Include;
                    -..\Include) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\dataflash.lst) OBJECT(.\Output\dataflash.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2017
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: N76E003 APROM program DATAFLASH (APROM) demo code
  15          //********************************************************************************************************
             -***
  16          #include "dataflash.h"
  17          
  18          /*--------------------------------------------------------------------------------------------------------
             --*/
  19          /*                                                                                                        
             - */
  20          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
  21          /*                                                                                                        
             - */
  22          /*--------------------------------------------------------------------------------------------------------
             --*/
  23          
  24          //********************************************************************************************************
             -***
  25          //  Nuvoton Technoledge Corp. 
  26          //  Website: http://www.nuvoton.com
  27          //  E-Mail : MicroC-8bit@nuvoton.com
  28          //  Date   : Apr/21/2017
  29          //********************************************************************************************************
             -***
  30          
  31          //********************************************************************************************************
             -***
  32          //  File Function: N76E003 APROM program DATAFLASH (APROM) demo code
  33          //********************************************************************************************************
             -***
  34          
  35          #include "N76E003.h"
  36          #include "Common.h"
C51 COMPILER V9.54   DATAFLASH                                                             03/18/2019 23:14:43 PAGE 2   

  37          #include "Delay.h"
  38          #include "SFR_Macro.h"
  39          #include "Function_define.h"
  40          #include "dataflash.h"                          
  41          
  42          
  43          #if 0
              //--------------------------------------------------------------------------------------------------------
             ----/
              void Trigger_IAP(void)
              {   
                  set_IAPGO;                                                                                                                                  //trigger IAP
                  if((CHPCON&SET_BIT6)==SET_BIT6)             // if fail flag is set, toggle error LED and IAP stop
                      {
                              clr_IAPFF;
                      }
              }
              /*
                              WARNING:
                      No matter read or writer, when IAPFF is set 1, 
                      this step process is fail. DATA should be ignore.
              */
              //--------------------------------------------------------------------------------------------------------
             ----/
              
              /*********************************************************************************************************
             -********
              Erase APROM subroutine:
                      
              
              **********************************************************************************************************
             -********/                
              void Erase_LDROM(unsigned int datasize,unsigned int dataaddr)
              {   
                  unsigned int u16Count,i;
                      if (datasize == 0)
                              return;
                      u16Count = datasize>>7;
                      if (datasize & 0x7F)
                              u16Count++;
                  set_IAPEN;                                                                                                  // Enable IAP function
                              IAPFD = 0xFF;                                                                                           // IMPORTANT !! To erase function must setting IAPFD = 0xFF 
                  IAPCN = PAGE_ERASE_LD;
                  set_LDUEN;                                                                                                  //  APROM modify Enable
                      
                  for(i=0x0000;i<u16Count;i++)                //
                  {        
                      IAPAL = LOBYTE(i*PAGE_SIZE + dataaddr);
                      IAPAH = HIBYTE(i*PAGE_SIZE + dataaddr);
                      Trigger_IAP(); 
                  }
                  clr_LDUEN;
                  clr_IAPEN;
              }
              
              //--------------------------------------------------------------------------------------------------------
             ----
              void Program_LDROM(unsigned int datasize,unsigned int dataaddr,unsigned char * buf)
              {   
                  unsigned int u16Count;
              
                  set_IAPEN;
C51 COMPILER V9.54   DATAFLASH                                                             03/18/2019 23:14:43 PAGE 3   

                  set_LDUEN;    
                  IAPAL = LOBYTE(dataaddr);
                  IAPAH = HIBYTE(dataaddr);
                  IAPCN = BYTE_PROGRAM_LD;
                  
                  for(u16Count=0;u16Count<datasize;u16Count++)
                  {   
                      IAPFD = buf[u16Count];
                      Trigger_IAP();
                     
                      IAPAL++;
                      if(IAPAL == 0)
                      {
                          IAPAH++;
                      }
                  } 
                              
                  clr_LDUEN;
                  clr_IAPEN;
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              void Program_LDROM_Verify(unsigned int datasize,unsigned int dataaddr,unsigned char  *buf)
              {   
                  unsigned int u16Count;
              
                  set_IAPEN;
                  IAPAL = LOBYTE(dataaddr);
                  IAPAH = HIBYTE(dataaddr);
                  IAPCN = BYTE_READ_LD;
              
                  for(u16Count=0;u16Count<datasize;u16Count++)
                  {   
                      Trigger_IAP();
                              buf[u16Count] = IAPFD;
                      IAPAL++;
                      if(IAPAL == 0)
                      {
                          IAPAH++;
                      }
                  } 
              
                  clr_IAPEN;
              }
              
              /*
              512 bytes div 32*16
              */
              
              void getdata(unsigned char datasize,unsigned int data_start_addr,unsigned char * buf)
              {
                      unsigned char i;
                      getdatastart:
                      for(i = 0; i< 32 ;i++)
                      {
                              Program_LDROM_Verify(datasize,data_start_addr + (i<<4),buf);
                              if (buf[0] != 0xA5)
                                      break;
                      }
                      if (i == 0)
                      {
                              //error read back area
C51 COMPILER V9.54   DATAFLASH                                                             03/18/2019 23:14:43 PAGE 4   

                              if (data_start_addr < 512)
                              {
                                      data_start_addr += 512;
                                      goto getdatastart;
                              }
                      }
                      else
                      {
                              i = i - 1;
                              Program_LDROM_Verify(datasize,data_start_addr + (i<<4),buf);
                      }
              }
              //--------------------------------------------------------------------------------------------------------
             ----
              
              //--------------------------------------------------------------------------------------------------------
             ----
              void savedata (unsigned char datasize,unsigned int data_addr,unsigned char * buf) 
              {
                      unsigned char buf1[16];
                      unsigned char i,j;
                      for(i=0;i<32;i++)
                      {
                              Program_LDROM_Verify(datasize,data_addr + (i<<4),buf1);
                              if (buf1[0] != 0xA5)
                                      break;
                      }
                      j = i;
                      if (i == 32)
                      {
                              Erase_LDROM(512,data_addr);
                              i = 0;
                      }
                      Program_LDROM(datasize,data_addr + (i<<4),buf); 
                      
                      //backup
                      if (j == 32)
                      {
                              Erase_LDROM(512,512);
                              j = 0;
                      }
                      Program_LDROM(datasize,data_addr + (j<<4) + 512,buf);
              }
              
              #else
 198          
 199          
 200          #define ADDR_BASE 0x3800
 201          
 202          /*********************************************************************************************************
             -********
 203          write_DATAFLASH_BYTE :
 204          user can copy all this subroutine into project, then call this function in main.
 205          **********************************************************************************************************
             -********/                
 206          void write_DATAFLASH_BYTE(UINT16 u16_addr,UINT8 u8_data)
 207          {
 208   1              UINT8 looptmp=0,u8_addrl_r;
 209   1              unsigned char code *cd_longaddr;
 210   1              unsigned char xdata *xd_tmp;
 211   1              
 212   1      //Check page start address
C51 COMPILER V9.54   DATAFLASH                                                             03/18/2019 23:14:43 PAGE 5   

 213   1              u8_addrl_r = u16_addr;
 214   1              if (u8_addrl_r<0x80)
 215   1              {
 216   2                      u8_addrl_r = 0;
 217   2              }
 218   1              else 
 219   1              {
 220   2                      u8_addrl_r = 0x80;
 221   2              }
 222   1      //Save APROM data to XRAM
 223   1              xd_tmp = 0x280;
 224   1              cd_longaddr = (u16_addr&0xff00)+u8_addrl_r;     
 225   1              while (xd_tmp !=0x300)
 226   1              {
 227   2                      *xd_tmp = *cd_longaddr;
 228   2                      looptmp++;
 229   2                      xd_tmp++;
 230   2                      cd_longaddr++;
 231   2              }
 232   1      // Modify customer data in XRAM
 233   1              u8_addrl_r = u16_addr;
 234   1              if (u8_addrl_r<0x80)
 235   1              {
 236   2                      xd_tmp = u8_addrl_r+0x280;
 237   2              }
 238   1              else
 239   1              {
 240   2                      xd_tmp = u8_addrl_r+0x200;
 241   2              }
 242   1              *xd_tmp = u8_data;
 243   1      //Erase APROM DATAFLASH page
 244   1                      IAPAL = u16_addr;
 245   1                      IAPAH = u16_addr>>8;
 246   1                      IAPFD = 0xFF;
 247   1                set_IAPEN; 
 248   1                      set_APUEN;
 249   1          IAPCN = 0x22;               
 250   1                      set_IAPGO; 
 251   1      //Save changed RAM data to APROM DATAFLASH
 252   1              u8_addrl_r = u16_addr;
 253   1              if (u8_addrl_r<0x80)
 254   1              {
 255   2                      u8_addrl_r =0;
 256   2              }
 257   1              else
 258   1              {
 259   2                      u8_addrl_r = 0x80;
 260   2              }
 261   1                      xd_tmp = 0x280;
 262   1                IAPAL = u8_addrl_r;
 263   1          IAPAH = u16_addr>>8;
 264   1                      set_IAPEN; 
 265   1                      set_APUEN;
 266   1                IAPCN = 0x21;
 267   1                      while (xd_tmp !=0x2FF)
 268   1                      {
 269   2                              IAPFD = *xd_tmp;
 270   2                              set_IAPGO;
 271   2                              IAPAL++;
 272   2                              xd_tmp++;
 273   2                      }
 274   1                      clr_APUEN;
C51 COMPILER V9.54   DATAFLASH                                                             03/18/2019 23:14:43 PAGE 6   

 275   1                      clr_IAPEN;
 276   1      }       
 277                  
 278          //-------------------------------------------------------------------------
 279          UINT8 read_APROM_BYTE(UINT16 code *u16_addr)
 280          {
 281   1              UINT8 rdata;
 282   1              rdata = *u16_addr>>8;
 283   1              return rdata;
 284   1      }
 285          
 286          void getdata(unsigned char datasize,unsigned char * buf)
 287          {
 288   1              unsigned char i;
 289   1              for(i=0;i<datasize;i++)
 290   1              {
 291   2                      buf[i] = read_APROM_BYTE ((UINT16 code *)(ADDR_BASE+i));
 292   2              }       
 293   1      
 294   1      }
 295          
 296          void savedata (unsigned char datasize,unsigned char * buf)
 297          {
 298   1              unsigned char i;
 299   1              for(i=0;i<datasize;i++)
 300   1              {
 301   2                      write_DATAFLASH_BYTE (ADDR_BASE + i,buf[i]);
 302   2              }
 303   1      }
 304          #endif
 305          
 306          //--------------------------------------------------------------------------------------------------------
             ----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    428    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
